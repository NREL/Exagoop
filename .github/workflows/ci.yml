name: PeleLMeX-CI

on:
  workflow_dispatch:
  push:
    branches: [ClangTidy]
  pull_request:
    branches: [ClangTidy]

concurrency:
  group: ${{github.ref}}-${{github.head_ref}}-ci
  cancel-in-progress: true

jobs:
  Formatting:
    runs-on: ubuntu-24.04
    steps:
    - name: Clone
      uses: actions/checkout@v4
    - name: Check formatting
      uses: DoozyX/clang-format-lint-action@v0.20
      with:
        source: './Source ./Exec'
        exclude: '.'
        extensions: 'H,h,cpp'
        clangFormatVersion: 20

  Lint-clang-tidy:
    needs: Formatting
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        enable_eb: [EB-OFF, EB-ON]
        include:
          - enable_eb: EB-OFF
            use_eb: "OFF"
          - enable_eb: EB-ON
            use_eb: "ON"
      fail-fast: false
    steps:
      - name: Setup
        run: |
          echo "NPROCS=$(nproc)" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=10" >> $GITHUB_ENV
          echo "CCACHE_LOGFILE=${{github.workspace}}/ccache.log.txt" >> $GITHUB_ENV
          echo "CCACHE_EXTRAFILES=${{github.workspace}}/.clang-tidy" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=100M" >> $GITHUB_ENV
          echo "CTCACHE_DIR=~/.cache/ctcache" >> $GITHUB_ENV
      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Ccache
        run: |
          wget https://github.com/ccache/ccache/releases/download/v4.8/ccache-4.8-linux-x86_64.tar.xz
          sudo curl https://raw.githubusercontent.com/matus-chochlik/ctcache/7fd516e91c17779cbc6fc18bd119313d9532dd90/clang-tidy-cache -Lo /usr/bin/clang-tidy-cache
          tar xvf ccache-4.8-linux-x86_64.tar.xz
          sudo cp -f ccache-4.8-linux-x86_64/ccache /usr/local/bin/
          sudo chmod +x /usr/bin/clang-tidy-cache
          mkdir -p ~/.cache/ctcache
      - name: Set Up Ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: ccache-${{github.workflow}}-${{github.job}}-${{matrix.enable_eb}}-git-${{github.sha}}
          restore-keys: |
               ccache-${{github.workflow}}-${{github.job}}-${{matrix.enable_eb}}-git-
      - name: Configure
        run: |
          cmake -B${{runner.workspace}}/build-clang-tidy \
          -DCMAKE_BUILD_TYPE:STRING=Release \
          -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
          -DCMAKE_CXX_COMPILER:STRING=clang++ \
          -DCMAKE_C_COMPILER:STRING=clang \
          -DPELE_ENABLE_EB:BOOL=${{matrix.use_eb}} \
          -DPELE_ENABLE_MPI:BOOL=OFF \
          -DPELE_ENABLE_FCOMPARE_FOR_TESTS:BOOL=OFF \
          -DPELE_ENABLE_CLANG_TIDY:BOOL=ON \
          -DCMAKE_CXX_COMPILER_LAUNCHER:STRING=ccache \
          ${{github.workspace}}
      - name: Check
        working-directory: ${{runner.workspace}}/build-clang-tidy
        run: |
          #set -eu -o pipefail
          cmake --build . --parallel ${{env.NPROCS}} 2>&1 | tee -a clang-tidy-full-report.txt
          egrep "Warning:|Error:|warning:|error:" clang-tidy-full-report.txt \
            | egrep -v "Submodules/amrex|Submodules/sundials|Submodules/AMReX-Hydro" \
            | egrep -v "ld: warning:" | sort | uniq \
            | awk 'BEGIN{i=0}{print $0}{i++}END{print "Warnings: "i}' > clang-tidy-warnings.txt
      - name: Ccache Report
        run: |
          ls ~/.cache
          ls ~/.cache/ccache
          du -hs ~/.cache/ccache
          ls ~/.cache/ctcache
          du -hs ~/.cache/ctcache
          ccache -s
      - name: Full report
        working-directory: ${{runner.workspace}}/build-clang-tidy
        run: cat clang-tidy-full-report.txt
      - name: Short report
        working-directory: ${{runner.workspace}}/build-clang-tidy
        run: |
          echo "::add-matcher::.github/problem-matchers/gcc.json"
          cat clang-tidy-warnings.txt
          export return=$(tail -n 1 clang-tidy-warnings.txt | awk '{print $2}')
          exit ${return}
  Lint-codeql:
    needs: Formatting
    runs-on: ubuntu-24.04
    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp
          queries: +security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
      - name: Configure
        run: |
          echo "NPROCS=$(nproc)" >> $GITHUB_ENV
          cmake -B${{runner.workspace}}/build-codeql \
          -DCMAKE_BUILD_TYPE:STRING=Debug \
          -DCMAKE_CXX_COMPILER:STRING=clang++ \
          -DCMAKE_C_COMPILER:STRING=clang \
          -DPELE_ENABLE_MPI:BOOL=OFF \
          -DPELE_ENABLE_FCOMPARE_FOR_TESTS:BOOL=OFF \
          -DPELE_ENABLE_CLANG_TIDY:BOOL=OFF \
          ${{github.workspace}}
      - name: Build
        run: |
          cmake --build ${{runner.workspace}}/build-codeql --parallel ${{env.NPROCS}}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"
          upload: False
          output: sarif-results
      - name: Filter CodeQL sarif
        uses: advanced-security/filter-sarif@v1
        with:
          patterns: |
            -**/Submodules/sundials/**
            -**/Submodules/amrex/**
            -**/Submodules/AMReX-Hydro/**
          input: sarif-results/cpp.sarif
          output: sarif-results/cpp.sarif
      - name: Upload CodeQL sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-results/cpp.sarif
  Lint-codespell:
    needs: Formatting
    runs-on: ubuntu-24.04
    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: false
      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Dependencies
        run: |
          # Install Python packages
          python -m pip install --upgrade pip
          pip install codespell
      - name: Run codespell
        run: codespell
